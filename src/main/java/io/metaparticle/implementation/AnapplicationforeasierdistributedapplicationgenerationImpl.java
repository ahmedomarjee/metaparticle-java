/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package io.metaparticle.implementation;

import io.metaparticle.Anapplicationforeasierdistributedapplicationgeneration;
import com.microsoft.rest.ServiceClient;
import com.microsoft.rest.RestClient;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import io.metaparticle.models.ErrorException;
import io.metaparticle.models.Service;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * Initializes a new instance of the Anapplicationforeasierdistributedapplicationgeneration class.
 */
public class AnapplicationforeasierdistributedapplicationgenerationImpl extends ServiceClient implements Anapplicationforeasierdistributedapplicationgeneration {
    /**
     * The Retrofit service to perform REST calls.
     */
    private AnapplicationforeasierdistributedapplicationgenerationService service;

    /**
     * Initializes an instance of Anapplicationforeasierdistributedapplicationgeneration client.
     */
    public AnapplicationforeasierdistributedapplicationgenerationImpl() {
        this("http://localhost");
    }

    /**
     * Initializes an instance of Anapplicationforeasierdistributedapplicationgeneration client.
     *
     * @param baseUrl the base URL of the host
     */
    public AnapplicationforeasierdistributedapplicationgenerationImpl(String baseUrl) {
        super(baseUrl);
        initialize();
    }

    /**
     * Initializes an instance of Anapplicationforeasierdistributedapplicationgeneration client.
     *
     * @param clientBuilder the builder for building an OkHttp client, bundled with user configurations
     * @param restBuilder the builder for building an Retrofit client, bundled with user configurations
     */
    public AnapplicationforeasierdistributedapplicationgenerationImpl(OkHttpClient.Builder clientBuilder, Retrofit.Builder restBuilder) {
        this("http://localhost", clientBuilder, restBuilder);
        initialize();
    }

    /**
     * Initializes an instance of Anapplicationforeasierdistributedapplicationgeneration client.
     *
     * @param baseUrl the base URL of the host
     * @param clientBuilder the builder for building an OkHttp client, bundled with user configurations
     * @param restBuilder the builder for building an Retrofit client, bundled with user configurations
     */
    public AnapplicationforeasierdistributedapplicationgenerationImpl(String baseUrl, OkHttpClient.Builder clientBuilder, Retrofit.Builder restBuilder) {
        super(baseUrl, clientBuilder, restBuilder);
        initialize();
    }

    /**
     * Initializes an instance of Anapplicationforeasierdistributedapplicationgeneration client.
     *
     * @param restClient the REST client containing pre-configured settings
     */
    public AnapplicationforeasierdistributedapplicationgenerationImpl(RestClient restClient) {
        super(restClient);
        initialize();
    }

    private void initialize() {
        initializeService();
    }

    private void initializeService() {
        service = retrofit().create(AnapplicationforeasierdistributedapplicationgenerationService.class);
    }

    /**
     * The interface defining all the services for Anapplicationforeasierdistributedapplicationgeneration to be
     * used by Retrofit to perform actually REST calls.
     */
    interface AnapplicationforeasierdistributedapplicationgenerationService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: io.metaparticle.Anapplicationforeasierdistributedapplicationgeneration listServices" })
        @GET("services")
        Observable<Response<ResponseBody>> listServices();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: io.metaparticle.Anapplicationforeasierdistributedapplicationgeneration getService" })
        @GET("services/{name}")
        Observable<Response<ResponseBody>> getService(@Path("name") String name);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: io.metaparticle.Anapplicationforeasierdistributedapplicationgeneration createOrUpdateService" })
        @PUT("services/{name}")
        Observable<Response<ResponseBody>> createOrUpdateService(@Path("name") String name, @Body Service body);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: io.metaparticle.Anapplicationforeasierdistributedapplicationgeneration deleteService" })
        @HTTP(path = "services/{name}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteService(@Path("name") String name);

    }

    /**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Service&gt; object if successful.
     */
    public List<Service> listServices() {
        return listServicesWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Service>> listServicesAsync(final ServiceCallback<List<Service>> serviceCallback) {
        return ServiceFuture.fromResponse(listServicesWithServiceResponseAsync(), serviceCallback);
    }

    /**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Service&gt; object
     */
    public Observable<List<Service>> listServicesAsync() {
        return listServicesWithServiceResponseAsync().map(new Func1<ServiceResponse<List<Service>>, List<Service>>() {
            @Override
            public List<Service> call(ServiceResponse<List<Service>> response) {
                return response.body();
            }
        });
    }

    /**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Service&gt; object
     */
    public Observable<ServiceResponse<List<Service>>> listServicesWithServiceResponseAsync() {
        return service.listServices()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<Service>>>>() {
                @Override
                public Observable<ServiceResponse<List<Service>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<Service>> clientResponse = listServicesDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<Service>> listServicesDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.restClient().responseBuilderFactory().<List<Service>, RestException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<List<Service>>() { }.getType())
                .build(response);
    }

    /**
     *
     * @param name the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Service object if successful.
     */
    public Service getService(String name) {
        return getServiceWithServiceResponseAsync(name).toBlocking().single().body();
    }

    /**
     *
     * @param name the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Service> getServiceAsync(String name, final ServiceCallback<Service> serviceCallback) {
        return ServiceFuture.fromResponse(getServiceWithServiceResponseAsync(name), serviceCallback);
    }

    /**
     *
     * @param name the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Service object
     */
    public Observable<Service> getServiceAsync(String name) {
        return getServiceWithServiceResponseAsync(name).map(new Func1<ServiceResponse<Service>, Service>() {
            @Override
            public Service call(ServiceResponse<Service> response) {
                return response.body();
            }
        });
    }

    /**
     *
     * @param name the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Service object
     */
    public Observable<ServiceResponse<Service>> getServiceWithServiceResponseAsync(String name) {
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        return service.getService(name)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Service>>>() {
                @Override
                public Observable<ServiceResponse<Service>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Service> clientResponse = getServiceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Service> getServiceDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<Service, ErrorException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<Service>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     *
     * @param name the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Service object if successful.
     */
    public Service createOrUpdateService(String name) {
        return createOrUpdateServiceWithServiceResponseAsync(name).toBlocking().single().body();
    }

    /**
     *
     * @param name the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Service> createOrUpdateServiceAsync(String name, final ServiceCallback<Service> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateServiceWithServiceResponseAsync(name), serviceCallback);
    }

    /**
     *
     * @param name the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Service object
     */
    public Observable<Service> createOrUpdateServiceAsync(String name) {
        return createOrUpdateServiceWithServiceResponseAsync(name).map(new Func1<ServiceResponse<Service>, Service>() {
            @Override
            public Service call(ServiceResponse<Service> response) {
                return response.body();
            }
        });
    }

    /**
     *
     * @param name the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Service object
     */
    public Observable<ServiceResponse<Service>> createOrUpdateServiceWithServiceResponseAsync(String name) {
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        final Service body = null;
        return service.createOrUpdateService(name, body)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Service>>>() {
                @Override
                public Observable<ServiceResponse<Service>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Service> clientResponse = createOrUpdateServiceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     *
     * @param name the String value
     * @param body the Service value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Service object if successful.
     */
    public Service createOrUpdateService(String name, Service body) {
        return createOrUpdateServiceWithServiceResponseAsync(name, body).toBlocking().single().body();
    }

    /**
     *
     * @param name the String value
     * @param body the Service value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Service> createOrUpdateServiceAsync(String name, Service body, final ServiceCallback<Service> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateServiceWithServiceResponseAsync(name, body), serviceCallback);
    }

    /**
     *
     * @param name the String value
     * @param body the Service value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Service object
     */
    public Observable<Service> createOrUpdateServiceAsync(String name, Service body) {
        return createOrUpdateServiceWithServiceResponseAsync(name, body).map(new Func1<ServiceResponse<Service>, Service>() {
            @Override
            public Service call(ServiceResponse<Service> response) {
                return response.body();
            }
        });
    }

    /**
     *
     * @param name the String value
     * @param body the Service value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Service object
     */
    public Observable<ServiceResponse<Service>> createOrUpdateServiceWithServiceResponseAsync(String name, Service body) {
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        Validator.validate(body);
        return service.createOrUpdateService(name, body)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Service>>>() {
                @Override
                public Observable<ServiceResponse<Service>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Service> clientResponse = createOrUpdateServiceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Service> createOrUpdateServiceDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<Service, ErrorException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<Service>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     *
     * @param name the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void deleteService(String name) {
        deleteServiceWithServiceResponseAsync(name).toBlocking().single().body();
    }

    /**
     *
     * @param name the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteServiceAsync(String name, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteServiceWithServiceResponseAsync(name), serviceCallback);
    }

    /**
     *
     * @param name the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteServiceAsync(String name) {
        return deleteServiceWithServiceResponseAsync(name).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     *
     * @param name the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteServiceWithServiceResponseAsync(String name) {
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        return service.deleteService(name)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteServiceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteServiceDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<Void, ErrorException>newInstance(this.serializerAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

}
